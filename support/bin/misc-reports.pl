#!/usr/bin/perl -w
#
# Miscellaneous Report Generation
#
# Copyright (c) 2000-2002 Carnegie Mellon University. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. The name "Carnegie Mellon University" must not be used to endorse or
#    promote products derived from this software without prior written
#    permission. For permission or any legal details, please contact:
#      Office of Technology Transfer
#      Carnegie Mellon University
#      5000 Forbes Avenue
#      Pittsburgh, PA 15213-3890
#      (412) 268-4387, fax: (412) 268-7395
#      tech-transfer@andrew.cmu.edu
#
# 4. Redistributions of any form whatsoever must retain the following
#    acknowledgment: "This product includes software developed by Computing
#    Services at Carnegie Mellon University (http://www.cmu.edu/computing/)."
#
# CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
# IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE FOR ANY SPECIAL,
# INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# $Id: misc-reports.pl,v 1.13 2008/03/27 19:42:42 vitroth Exp $
# 
# $Log: misc-reports.pl,v $
# Revision 1.13  2008/03/27 19:42:42  vitroth
# Merging changes from duke merge branch to head, with some minor type corrections
# and some minor feature additions (quick jump links on list pages, and better
# handling of partial range allocations in the subnet map)
#
# Revision 1.12.18.1  2007/10/11 20:59:46  vitroth
# Massive merge of all Duke changes with latest CMU changes, and
# conflict resolution therein.   Should be ready to commit to the cvs HEAD.
#
# Revision 1.12.16.1  2007/09/20 18:43:07  kevinm
# Committing all local changes to CVS repository
#
# Revision 1.1.1.1  2004/11/17 18:12:42  kcmiller
#
#
# Revision 1.12  2004/04/28 16:06:02  kevinm
# * Hack to extract building from device name
#
# Revision 1.11  2002/08/28 04:22:27  ebardsle
# Actually had misc-reports drop suspended macs from the bootptab, not
# just /etc/hosts
#
# Revision 1.10  2002/06/04 17:18:04  kevinm
# * Get the subnet ID in the report
#
# Revision 1.9  2002/05/10 17:07:36  kevinm
# * Added authbridge dynamic report as well
#
# Revision 1.8  2002/01/30 20:36:02  kevinm
# Fixed vars_l
#
# Revision 1.7  2001/07/23 15:35:51  kevinm
# *** empty log message ***
#
# Revision 1.6  2001/07/20 22:22:26  kevinm
# Copyright info
#
# Revision 1.5.4.1  2001/07/23 15:30:29  kevinm
# Added hb.net.cmu.edu
#
# Revision 1.5  2000/09/20 19:31:46  vitroth
# Production scripts should use /home/netreg not /home/netreg-dev
#
# Revision 1.4  2000/08/29 15:50:26  vitroth
# Fixed format to fix dormadmin
#
# Revision 1.3  2000/08/22 12:58:17  kevinm
# * fixed bootptab generation
#
# Revision 1.2  2000/08/15 03:17:06  kevinm
# * updates from today's loading.
# * portadmin updated to use getLock, etc. in CMU/Netdb
#
# Revision 1.1  2000/08/14 05:22:13  kevinm
# *** empty log message ***
#
#
#

use strict;
use Fcntl ':flock';

BEGIN {
  my @LPath = split(/\//, __FILE__);
  push(@INC, join('/', @LPath[0..$#LPath-1]));
}
use vars_l;
use lib $vars_l::NRLIB;
use CMU::Netdb;
use CMU::Netdb::machines_subnets;
use CMU::Netdb::buildings_cables;
use CMU::Netdb::dns_dhcp;
use CMU::Netdb::errors;
use CMU::Netdb::helper;
#use CMU::WebInt::interface;
#use CMU::WebInt::helper;
#use CMU::WebInt;


my $USER = 'netreg';
my $DIRPATH = '/home/netreg/etc/misc-reports';

my $dbh = report_db_connect();
# check for errors?
if (!$dbh) {
  &admin_mail('misc-reports.pl', 'Database handle is NULL!');
  exit -1;
}

my ($h, $d, $ip, $build);
format ALL_FILES =
@<<<<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<<  @<<<<<<<<<
$h, $d, $ip, $build;
.

my $header = 
"# 
# Carnegie Mellon Network Registration System
# This file automatically generated by misc-reports.pl at ".localtime(time())."
# 
# DO NOT UPDATE! CHANGES WILL BE OVERWRITTEN!
#
";

my %buildAbbrev;

my $spr = list_subnet_presences($dbh, $USER, '');
my %spos = %{makemap(\@CMU::Netdb::structure::subnet_presence_fields)};
my %mpos = %{makemap(\@CMU::Netdb::structure::machine_fields)};
my %spres;
if (!ref $spr) {
  &admin_mail('misc-reports.pl', 'Error from list_subnet_presences: '.$spr);
  exit -1;
}

shift(@$spr);
foreach my $s (@$spr) {
  if (defined $spres{$s->[$spos{'subnet_presence.subnet'}]}) {
    push(@{$spres{$s->[$spos{'subnet_presence.subnet'}]}}, 
	 $s->[$spos{'subnet_presence.building'}]);
  }else{
    $spres{$s->[$spos{'subnet_presence.subnet'}]} = 
      [$s->[$spos{'subnet_presence.building'}]];
  }
}

#map { print STDERR "spres $_: ".join(',', @{$spres{$_}})."\n" } keys %spres;
my $ml = list_machines($dbh, $USER, ' 1 ORDER BY machine.ip_address');
if (!ref $ml) {
  &admin_mail('misc-reports.pl', 'Error from list_machines: '.$ml);
  exit -1;
}
shift(@$ml);

# must be first for buildings to work!
make_building_list();
make_all_hubs();
make_all_switches();
make_hosts();
make_bootptab();

sub make_hosts {
  open(FILE, ">$DIRPATH/hosts");
  print FILE 
"#
#       NetReg Host Table
#
127.0.0.1       localhost
#
#
#       NetReg Host File - NIC format
#
#   Created ".localtime(time())."\n";

  # load CNAMES
  my $dnrr = list_dns_resources($dbh, $USER, "type = 'CNAME'");
  my %dnsrpos = %{makemap(\@CMU::Netdb::structure::dns_resource_fields)};
  if (!ref $dnrr) {
    &admin_mail('misc-reports.pl', 'Error from list_dns_resources: '.$dnrr);
    exit -1;
  }
  shift(@$dnrr);
  my %cnames;
  foreach my $cn (@$dnrr) {
    if (defined $cnames{$cn->[$dnsrpos{'dns_resource.rname'}]}) {
      push (@{$cnames{$cn->[$dnsrpos{'dns_resource.rname'}]}}, 
	    $cn->[$dnsrpos{'dns_resource.name'}]);
    }else{
      $cnames{$cn->[$dnsrpos{'dns_resource.rname'}]} = [$cn->[$dnsrpos{'dns_resource.name'}]];
    }
  }

  foreach my $m (@$ml) {
    my ($hn, $ip) = ($m->[$mpos{'machine.host_name'}],
		     $m->[$mpos{'machine.ip_address'}]);
    next if ($ip eq '0' ||
	     $m->[$mpos{'machine.flags'}] =~ /suspend/);

    print FILE long2dot($ip)."\t".lc($hn);
    print FILE " ".lc(join(' ', @{$cnames{$hn}})) if (defined $cnames{$hn});
    print FILE "\n";
  }
  close(FILE);
}
      

sub make_all_switches {
  my (@lbl);
  open(FILE, ">$DIRPATH/all-switches");
  print FILE $header;
  select((select(FILE),
	    $~ = 'ALL_FILES')[0]);
  foreach my $m (@$ml) {
    next unless ($m->[$mpos{'machine.host_name'}] =~ /sw.net.cmu.edu$/i ||
		 $m->[$mpos{'machine.host_name'}] =~ /sw.cmu.net$/i);
    my @lbl = ();
    $build = '';

#    if (!defined $spres{$m->[$mpos{'machine.ip_address_subnet'}]}) {
#      #      &admin_mail('misc-reports.pl', "No building for machine: ".
#      #		  $m->[$mpos{'machine.id'}]);
#      $build = 'CYH';
#    }else{
#      @lbl = @{$spres{$m->[$mpos{'machine.ip_address_subnet'}]}};
#      
#      if($#lbl == 0) {
#	$build = $buildAbbrev{$lbl[0]};
#      }else{
#	$build = $buildAbbrev{$lbl[0]};
#	foreach (@lbl) {
#	  $build = $buildAbbrev{$_} if ($m->[$mpos{'machine.host_name'}] =~ /$buildAbbrev{$_}/);
#	}
#      }
#    }
    
    $~ = 'ALL_FILES';
    ($h, $d) = splitHostname($m->[$mpos{'machine.host_name'}]);
    ($build) = split(/\-/, $h, 2);
    $ip = long2dot($m->[$mpos{'machine.ip_address'}]);
    next if ($ip eq '0.0.0.0');
    write FILE;
#    print FILE "$h\t\t$d\t$ip\t$build\n";
  }
  close(FILE);
}

sub make_all_hubs {
  my (@lbl);
  open(FILE, ">$DIRPATH/all-hubs");
  print FILE $header;
  select((select(FILE),
	    $~ = 'ALL_FILES')[0]);
  foreach my $m (@$ml) {
     next unless ($m->[$mpos{'machine.host_name'}] =~ /hb.net.cmu.edu$/i ||
                 $m->[$mpos{'machine.host_name'}] =~ /hb.cmu.net$/i);
    my @lbl = ();
    $build = '';

#    if (!defined $spres{$m->[$mpos{'machine.ip_address_subnet'}]}) {
#      #      &admin_mail('misc-reports.pl', "No building for machine: ".
#      #		  $m->[$mpos{'machine.id'}]);
#      $build = 'CYH';
#    }else{
#      @lbl = @{$spres{$m->[$mpos{'machine.ip_address_subnet'}]}};
#      
#      if($#lbl == 0) {
#	$build = $buildAbbrev{$lbl[0]};
#      }else{
#	$build = $buildAbbrev{$lbl[0]};
#	foreach (@lbl) {
#	  $build = $buildAbbrev{$_} if ($m->[$mpos{'machine.host_name'}] =~ /$buildAbbrev{$_}/);
#	}
#      }
#    }
    $~ = 'ALL_FILES';
    ($h, $d) = splitHostname($m->[$mpos{'machine.host_name'}]);
    ($build) = split(/\-/, $h, 2);
    $ip = long2dot($m->[$mpos{'machine.ip_address'}]);
    next if ($ip eq '0.0.0.0');
    write FILE;
#    print FILE "$h\t\t$d\t$ip\t$build\n";
  }
  close(FILE);
}

sub make_building_list {
  # Get a building list
  my %building_pos = %{makemap(\@CMU::Netdb::structure::building_fields)};
  my $bl = list_buildings($dbh, $USER, " 1 ORDER BY building.building");
  if (!ref $bl) {
    &admin_mail('misc-reports.pl', 'Error from list_buildings: '.$bl);
    exit -1;
  }
  
  shift(@$bl);
  open(FILE, ">$DIRPATH/building-list");
  print FILE $header;
  
  foreach my $b (@$bl) {
    my $bid = $b->[$building_pos{'building.building'}];
    $buildAbbrev{$bid} = $b->[$building_pos{'building.abbreviation'}];
    $bid =~ s/^0//;
    print FILE "$bid\t".
      $b->[$building_pos{'building.abbreviation'}]."\t".
	$b->[$building_pos{'building.name'}]."\n";
  }
  close(FILE);
}
  
sub make_bootptab {
  open(FILE, ">$DIRPATH/bootptab");
  print FILE $header;
  print FILE "# NOTE: Use of this file is deprecated!\n#\n";
  foreach my $m (@$ml) {
    next if ($m->[$mpos{'machine.ip_address'}] eq '0' ||
	    $m->[$mpos{'machine.mac_address'}] eq '' ||
	    $m->[$mpos{'machine.flags'}] =~ /suspend/);
    print FILE $m->[$mpos{'machine.host_name'}].":ht=ethernet:ha=".
      $m->[$mpos{'machine.mac_address'}].":ip=".
	long2dot($m->[$mpos{'machine.ip_address'}]).":\n";
  }
  close(FILE);
  open(FILE, ">$DIRPATH/bootptab-dynamic");
  print FILE $header;
  print FILE "## ONLY FOR AUTHBRIDGE.\n";
  foreach my $m (@$ml) {
    next if ($m->[$mpos{'machine.flags'}] =~ /suspend/);
    print FILE $m->[$mpos{'machine.host_name'}].":ht=ethernet:ha=".
      $m->[$mpos{'machine.mac_address'}].":ip=".
	long2dot($m->[$mpos{'machine.ip_address'}]).":".
	"sid=".$m->[$mpos{'machine.ip_address_subnet'}].":\n";
  }
  close(FILE);
}

#system('/home/netreg/bin/afs-xfer.sh');

$dbh->disconnect();


